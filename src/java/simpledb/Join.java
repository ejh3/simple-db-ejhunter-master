package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private Tuple outer; // Retain the outer tuple so further comparisons can be made without calling next()
    private final HashMap<Field, List<Tuple>> hashMap = new HashMap<>();
    private Iterator<Tuple> joins = null;
    private Tuple tProbe;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() { return p; }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        outer = child1.hasNext() ? child1.next() : null;
        joins = null;
        if (p.getOperator() == Predicate.Op.EQUALS && outer != null) {
            hashMap.put(outer.getField(p.getField1()), new ArrayList<Tuple>());
            hashMap.get(outer.getField(p.getField1())).add(outer);
            while (child1.hasNext()) {
                Tuple t = child1.next();
                List<Tuple> tuples = hashMap.get(t.getField(p.getField1()));
                if (tuples == null) {
                    tuples = new ArrayList<Tuple>();
                    hashMap.put(t.getField(p.getField1()), tuples);
                }
                tuples.add(t);
            }
        }
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        outer = child1.hasNext() ? child1.next() : null;
        joins = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple or null if there are no more tuples.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (p.getOperator() == Predicate.Op.EQUALS && outer != null) { // if hash joining
            while (child2.hasNext() || (joins != null && joins.hasNext())) {
                if (joins == null || !joins.hasNext()) {
                    tProbe = child2.next();
                    Field key = tProbe.getField(p.getField2());
                    joins = hashMap.containsKey(key) ? hashMap.get(key).iterator() : null;
                } else {
                    Tuple tBuild = joins.next();
                    if (p.filter(tBuild, tProbe)) {
                        return Tuple.merge(tBuild, tProbe, getTupleDesc());
                    }
                }
            }
        }
        else {
            while (outer != null) {
                if (child2.hasNext()) {
                    Tuple inner = child2.next();
                    if (p.filter(outer, inner)) {
                        return Tuple.merge(outer, inner, getTupleDesc());
                    }
                } else {
                    outer = child1.hasNext() ? child1.next() : null;
                    child2.rewind();
                }
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }

}
